``1-my_list``module
===================

using ``1-my_list``
-------------------

import:
	>>> MyList = __import__('1-my_list').MyList

Test 1:

	>>> test = MyList()
	>>> isinstance(test, list)
	True

Test 2:

	>>> test = MyList()
	>>> type(test) == MyList
	True

Test 3:

	>>> type(MyList.__dict__['print_sorted'])
	<class 'function'>

Test 4:

	>>> test = MyList()
	>>> test.__class__.print_sorted()
	Traceback (most recent call last):
	...
	TypeError: print_sorted() missing 1 required positional argument: 'self'

Test 5:

	>>> test = MyList()
	>>> test.print_sorted()
	[]

Test  6:

	>>> test.print_sorted([1])
	Traceback (most recent call last):
	...
	TypeError: print_sorted() takes 1 positional argument but 2 were given

Test 7:

	>>> test.print_sorted([1, 8, 7], 1)
	Traceback (most recent call last):
	...
	TypeError: print_sorted() takes 1 positional argument but 3 were given

Test 8:

	>>> test = MyList([1, 8, 7])
	>>> test.print_sorted()
	[1, 7, 8]

Test 9:

	>>> test = MyList([9, 4, 7, 0, 3])
	>>> test.print_sorted()
	[0, 3, 4, 7, 9]

Test 10:

	>>> test = MyList([-1, -8, -7])
	>>> test.print_sorted()
	[-8, -7, -1]

Test 11:

	>>> test =  MyList([-1, 8, -7])
	>>> test.print_sorted()
	[-7, -1, 8]

Test 12:

	>>> test = MyList([1, 7, 8])
	>>> test.print_sorted()
	[1, 7, 8]

Test 13:

	>>> test = MyList([1, 8, 7])
	>>> test.print_sorted()
	[1, 7, 8]
	>>> test
	[1, 8, 7]

Test 14:

	>>> test = MyList([1, 8])
	>>> test.append(7)
	>>> test
	[1, 8, 7]